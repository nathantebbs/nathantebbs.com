#+hugo_base_dir: ../

* About Me
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:
#+begin_export html
<div class="container">
    <div class="about-image-stack">
        <img src="/images/aboutmeWA.JPG" alt="Olympic Mountains, Washington">
        <img src="/images/aboutmeFRC1.JPG" alt="Olympia Robotics Federation, World Finals, Huston">
        <img src="/images/aboutmeTVR.png" alt="Tanque Verde Ranch Kids Program, Tucson AZ">
        <img src="/images/aboutmeCairo.JPG" alt="Nutty Scientists Lab, STEM Zone, Cairo, Egypt">
    </div>
    <div class="text-side">
        <p>I attended High School and earned my Associate's degree in Olympia, Washington. After earning my diplomas
        I moved to Tucson, Arizona to pursue a Bachelor of Science in Computer Science, where I am now expected to graduate
        in Spring of next year.</p>
        <p>During High School, I joined an after school <a href="https://www.firstinspires.org/programs/frc/" target="_blank">FRC</a> program,
        and found team <a href="https://www.orf4450.org/" target="_blank">4450</a>. During my two years as Safety Captain
        I was exposed to the engineering process in a competative environment, while also leading a capstone expidition to a
        partner junior robotics team to bring metal based robotics to Cairo, Egypt.</p>
    </div>
</div>
#+end_export



* DONE Post 1
:PROPERTIES:
:EXPORT_HUGO_SECTION: /posts/
:EXPORT_FILE_NAME: post-1
:EXPORT_DATE: <2025-09-17 Wed>
:EXPORT_TITLE: Migrating from Neovim to Emacs
:EXPORT_OPTIONS: toc:2
:EXPORT_HUGO_DRAFT: true
:END:

#+begin_export html
<div class="image-stack">
    <img src="/images/lazyvim1.png" alt="Lazy Neovim Distrobution">
    <img src="/images/doom1.png" alt="Doom Emacs Distrobution">
</div>
#+end_export

** Background

Since starting my journey into discovering different development environments within my personal linux setup,
and attempting to make them practical either for Computer Science school work or just personal projects has proven
an effecient procrastination technique. However, I love text editors, and the feeling of customizing a neovim plugin for
the first time is wonderful. However, the ecosystem surround neovim and the pace at which the plugins evolve I quickly became
exausted trying to keep up after being out of touch with the editor for times. Around late last year I discovered Emacs, first
because of [[https://www.orgmode.org][org-mode]], then later falling in love with the GUI editor first PDE, and [[https://github.com/emacs-evil/evil][evil-mode]].

I started out using an out-of-the-box distrobution of evil-mode Emacs called [[https://github.com/doomemacs/doomemacs][doom-emacs]]. Doom provided a way to keep the lovely
vim keybinds that have been baked into my brain while allowing me to use cool native Emacs features and plugins. Additionally,
the utility for me to use neovim for text editing has shifted mainly to not provide IDE features. This was inspired by trying to
edit some assignment code that I had secure copied into my univerities virtual machine. For fun, I decided to clone my neovim config
and benefit from the LSP setup. However, after long download times and heavy lag I realized that I had entirely defeated the purpose
of my light-weight text editor by giving it the resposibility of a full blown IDE. Furthermore, neovim has amazing stock featuers,
and in the nightly branch now has a built-in package manager, which is quite intriguing.

After getting familiar with doom, I realized that I was loading 200 packages on startup, and I couldn't even tell you what half of
them were. Also, doom comes with a lot of custom Emacs keybindings, and I love evil mode but trying remap all baseline functionality
breaks the reason why you choose an editor to. Basically, I don't want to turn Emacs into Neo-vim, I just want hjkl.

** Emacs Configuration

*** Basic U/I + Basic Options

#+BEGIN_SRC elisp
  ;; Remove window decorations
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (global-display-line-numbers-mode t) ;; Line numbers

  (setq inhibit-startup-screen t) ;; Disable startup screen

  ;; Tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)

  ;; Mini-buffer completion mode
  (fido-vertical-mode)

  ;; Misc
  (electric-pair-mode t) ;; Autopairs
  (which-key-mode) ;; which-key
  (setq org-agenda-files '("~/org/todo.org"))
  (setq evil-want-C-u-scroll t) ;; Please fix scroll!! (this works)

  ;; Change file backup location
  (setq make-backup-file nil) ;; No more
  (setq auto-save-default nil) ;; No autosave files
  (setq backup-directory-alist '((".*" . "~/.Trash")))


#+END_SRC

When you first start Emacs, there are a lot of simple U/I options that should be off by default
for any competant user. Above we remove clunky things like window decorations, enable line numbers, autopairs, which-key
org-agenda files, <C-u> for up scroll, and no more annoying backup~ files.

*** Keybindings

#+BEGIN_SRC elisp

  ;; ===============
  ;; Keybindings
  ;; ===============

  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (global-set-key (kbd "C-x C-c") '(lambda () (interactive) (find-file "~/.emacs")))
  (global-set-key (kbd "C-x e") 'eval-buffer)
  (global-set-key (kbd "C-c a") 'org-agenda-list)
  (global-set-key (kbd "C-c o") '(lambda () (interactive) (find-file "~/org/todo.org")))

#+END_SRC

These are just the basic keybindings that I have set after about a week of playing with this config. The first place I might
expand beyond this is probably looking more into magit, or some better org mode integration.

*** Package Setup

**** Bootstrapping straight.el

#+BEGIN_SRC elisp

  ;; Straight.el bootstrap
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el"
          (or (bound-and-true-p straight-base-dir)
              user-emacs-directory)))
        (bootstrap-version 7))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

#+END_SRC

This is the basic bootstrap for straight.el which we will use to install external packages below.

**** Installing packages via 'use-package'

#+BEGIN_SRC elisp

  ;; ===============
  ;; Install Packages:
  ;; ===============

  (straight-use-package 'use-package)

  ;; Theme
  (use-package gruber-darker-theme
    :straight t
    :config
    (load-theme 'gruber-darker t))

  ;; Evil mode
  (use-package evil
    :straight t)
  (require 'evil)
  (evil-mode 1)

  ;; Magit
  (use-package magit
    :straight t)

  ;; Devdocs
  ;; NOTE: use M-x devdocs-install
  (use-package devdocs
    :straight t)

  ;; Company
  (use-package company
    :straight t
    :hook (prog-mode . global-company-mode))

  ;; Fzf
  (use-package fzf
    :bind ("C-c s" . fzf-grep)
    :straight t)


  ;; Markdown
  (use-package markdown-mode
    :straight t
    :mode ("\\.md\\'" . markdown-mode)
    :init
    (setq markdown-command "multimarkdown")  ;; or "pandoc"
    :config
    (setq markdown-fontify-code-blocks-natively t))

  ;; ox-hugo
  (use-package ox-hugo
    :straight t
    :after ox)
#+END_SRC

Most of these packages are up to personal preference for my goals with my own config. Notebly however I have chosen to use
an external theme as apposed to a built in themes. The main reasoning I have behind this is because my emacs config is designed
to be lightweight but not portable, that is I won't be installing this on any VMs. The sipler option to install a theme:

#+BEGIN_SRC elisp
  ;; use M-x describe-theme RET 
  (load-theme 'modus-vivendi)
#+END_SRC

** Sources
- [[https://www.youtube.com/@LooseLeafLearning][Loose Leaf Learning (YT)]]
- [[https://github.com/rexim/gruber-darker-theme][Gruber Darker (Theme)]]
- [[https://github.com/emacs-evil/evil][evil-mode]]
- [[https://github.com/radian-software/straight.el][straight.el (Package Manager)]]
- [[https://github.com/doomemacs/doomemacs][Doom Emacs (IDE Alternative)]]
  
* TODO Post 2
:PROPERTIES:
:EXPORT_HUGO_SECTION: /posts/
:EXPORT_FILE_NAME: post-2
:EXPORT_DATE: <2025-10-10 Fri>
:EXPORT_TITLE: Exploring Raylib in Zig
:END:

*This post is currently testing a simple "Hello, World" program in C.*

#+BEGIN_SRC Zig
const rl = @import("raylib");

pub fn main() anyerror!void {
    // Initialization
    //--------------------------------------------------------------------------------------
    const screenWidth = 800;
    const screenHeight = 450;

    rl.initWindow(screenWidth, screenHeight, "raylib-zig [core] example - basic window");
    defer rl.closeWindow(); // Close window and OpenGL context

    rl.setTargetFPS(60); // Set our game to run at 60 frames-per-second
    //--------------------------------------------------------------------------------------

    // Main game loop
    while (!rl.windowShouldClose()) { // Detect window close button or ESC key
        // Update
        //----------------------------------------------------------------------------------
        // TODO: Update your variables here
        //----------------------------------------------------------------------------------

        // Draw
        //----------------------------------------------------------------------------------
        rl.beginDrawing();
        defer rl.endDrawing();

        rl.clearBackground(.white);

        rl.drawText("Congrats! You created your first window!", 190, 200, 20, .light_gray);
        //----------------------------------------------------------------------------------
    }
}
#+END_SRC
